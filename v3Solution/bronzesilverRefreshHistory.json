{"name":"bronzesilverRefreshHistory","description":"","version":"1.0","culture":"en-US","modifiedTime":"2022-11-07T19:50:59.9652229+00:00","ppdf:outputFileFormat":"Csv","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"getDatasetsAsAdminWithoutUsers":{"queryId":"cbafe466-97dd-46fb-b22e-fa9f211c39b2","queryName":"getDatasetsAsAdminWithoutUsers","queryGroupId":"71654dd2-1acb-445a-8ea3-ce796084edb6"},"getPBIToken":{"queryId":"86cc5a45-fb15-4135-a586-7ef99551f233","queryName":"getPBIToken","queryGroupId":"71654dd2-1acb-445a-8ea3-ce796084edb6"},"getRefresh":{"queryId":"92fb0d1d-c49f-42d7-9349-dfa95cfe9b91","queryName":"getRefresh","queryGroupId":"71654dd2-1acb-445a-8ea3-ce796084edb6"},"getDatasetRefreshHistory":{"queryId":"cd4f9d02-6561-42ca-892d-c3b9ee87e605","queryName":"getDatasetRefreshHistory","queryGroupId":"71654dd2-1acb-445a-8ea3-ce796084edb6"},"getDatasetRefreshHistoryAll":{"queryId":"caf34716-0939-4a3d-9242-07af2f7f9e1e","queryName":"getDatasetRefreshHistoryAll","queryGroupId":"71654dd2-1acb-445a-8ea3-ce796084edb6"},"token":{"queryId":"1ba99e6d-53c2-49ed-b0b3-8aa914f4b2ab","queryName":"token","queryGroupId":"c5c18ee9-8ab1-463e-ac7d-3ab6d18f9348"},"output":{"queryId":"c5d46cb4-2c24-4cdd-bf75-27f37eb5397e","queryName":"output","queryGroupId":"9c311d35-d038-4ac6-8db8-c1c5aeafdb78","loadEnabled":true},"TenantID":{"queryId":"a413873f-6dfb-4991-85fb-b372bd454539","queryName":"TenantID","queryGroupId":"5feb534e-b251-40fa-b03e-2f2a7507acec"},"ClientID":{"queryId":"56eea3b7-73c1-4fe3-98d0-125109b3d2b4","queryName":"ClientID","queryGroupId":"5feb534e-b251-40fa-b03e-2f2a7507acec"},"ClientSecret":{"queryId":"aacf4dfb-97dc-4e72-817f-806984248d9e","queryName":"ClientSecret","queryGroupId":"5feb534e-b251-40fa-b03e-2f2a7507acec"}},"document":"section Section1;\r\nshared getDatasetsAsAdminWithoutUsers = let\n    Source = let\n    output =\n        (generatedToken as text) =>\n            let\n                apiCall =\n                    Json.Document(\n                        Web.Contents(\n                            \"https://api.powerbi.com/v1.0/myorg/admin\",\n                            [\n                                RelativePath = \"datasets\",\n                                Headers = [\n                                    #\"Content-Type\" = \"application/json\",\n                                    Authorization = generatedToken\n                                ]\n                            ]\n                        )\n                    )\n            in\n                #table(\n                    type table [\n                        id = text,\n                        name = text,\n                        addRowsAPIEnabled = logical,\n                        configuredBy = text,\n                        isRefreshable = logical,\n                        isEffectiveIdentityRequired = logical,\n                        isEffectiveIdentityRolesRequired = logical,\n                        isOnPremGatewayRequired = text,\n                        webUrl = text,\n                        targetStorageMode = text,\n                        createdDate = datetime,\n                        createReportEmbedURL = text,\n                        qnaEmbedURL = text,\n                        upstreamDatasets = list\n                    ],\n                    List.Transform(\n                        apiCall[value],\n                        each\n                            {\n                                _[id]?,\n                                _[name]?,\n                                _[addRowsAPIEnabled]?,\n                                _[configuredBy]?,\n                                _[isRefreshable]?,\n                                _[isEffectiveIdentityRequired]?,\n                                _[isEffectiveIdentityRolesRequired]?,\n                                _[isOnPremGatewayRequired]?,\n                                _[webUrl]?,\n                                _[targetStorageMode]?,\n                                DateTime.From(_[createdDate]?),\n                                _[createReportEmbedURL]?,\n                                _[qnaEmbedURL]?,\n                                _[upstreamDatasets]?\n                            }\n                    )\n                ),      \n    documentation = [\n        Documentation.Name = \" get-Capacities.pq \",\n        Documentation.Description = \" Get all capacities in tenant \",\n        Documentation.Source = \"https://www.jaknapowerbi.cz\",\n        Documentation.Version = \" 1.0 \",\n        Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n        output,\n        Value.ReplaceMetadata(\n            Value.Type(output),\n            documentation\n        )\n    )\nin\n    Source;\r\nshared getPBIToken = let\n    Source = let\n    output =\n        (AzureADTenantID as text, AzureApplicationClientSecret as text, AzureApplicationClientID as text) as text =>\n            let\n                resource = \"https://analysis.windows.net/powerbi/api\",\n                tokenResponse =\n                    Json.Document(\n                        Web.Contents(\n                            \"https://login.windows.net\",\n                            [\n                                RelativePath = AzureADTenantID & \"/oauth2/token\",\n                                Content =\n                                    Text.ToBinary(\n                                        Uri.BuildQueryString(\n                                            [\n                                                client_id = AzureApplicationClientID,\n                                                resource = resource,\n                                                grant_type = \"client_credentials\",\n                                                client_secret = AzureApplicationClientSecret\n                                            ]\n                                        )\n                                    ),\n                                Headers = [\n                                    Accept = \"application/json\"\n                                ],\n                                ManualStatusHandling = {\n                                    400\n                                }\n                            ]\n                        )\n                    ),\n                token_output =\n                    tokenResponse[token_type]\n                    & \" \"\n                    & tokenResponse[access_token]\n            in\n                token_output,\n    documentation = [\n        Documentation.Name = \" get-BearerToken.pq \",\n        Documentation.Description = \" Get Bearer Token needed for Power BI REST API calls \",\n        Documentation.Source = \"https://www.jaknapowerbi.cz\",\n        Documentation.Version = \" 1.0 \",\n        Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n        output,\n        Value.ReplaceMetadata(\n            Value.Type(output),\n            documentation\n        )\n    )\nin\n    Source;\r\nshared getRefresh = let\n    output =\n        (generatedToken as text, datasetId as text) =>\n            let\n                apiCall =\n                    Json.Document(\n                        Web.Contents(\n                            \"https://api.powerbi.com/v1.0/myorg\",\n                            [\n                                RelativePath = \"admin/capacities/refreshables\",\n                                Query = [\n                                    #\"$expand\" = \"capacity,group\"\n                                ],\n                                Headers = [\n                                    #\"Content-Type\" = \"application/json\",\n                                    Authorization = generatedToken\n                                ]\n                            ]\n                        )\n                    )\n            in\n                #table(\n                    type table [\n                        id = text,\n                        name = text,\n                        kind = text,\n                        startTime = datetime,\n                        endTime = datetime,\n                        refreshCount = number,\n                        refreshFailures = number,\n                        averageDuration = number,\n                        medianDuration = number,\n                        refreshesPerDay = number,\n                        lastRefresh = record,\n                        refreshSchedule.days = list,\n                        refreshSchedule.times = list,\n                        refreshSchedule.enabled = logical,\n                        refreshSchedule.localTimeZoneId = text,\n                        refreshSchedule.notifyOption = text,\n                        configuredBy = text,\n                        capacity = record,\n                        group = record\n                    ],\n                    List.Transform(\n                        apiCall[value],\n                        each\n                            {\n                                _[id]?,\n                                _[name]?,\n                                _[kind]?,\n                                _[startTime]?,\n                                _[endTime]?,\n                                _[refreshCount]?,\n                                _[refreshFailures]?,\n                                _[averageDuration]?,\n                                _[medianDuration]?,\n                                _[refreshesPerDay]?,\n                                _[lastRefresh]?,\n                                _[refreshSchedule]?[days]?,\n                                _[refreshSchedule]?[times]?,\n                                _[refreshSchedule]?[enabled]?,\n                                _[refreshSchedule]?[localTImeZoneId]?,\n                                _[refreshSchedule]?[notifyOption]?,\n                                _[configuredBy]?{0}?,\n                                _[capacity]?,\n                                _[group]?\n                            }\n                    )\n                ),\n    documentation = [\n        Documentation.Name = \" get-Refreshables.pq \",\n        Documentation.Description = \" Get refreshable datasets \",\n        Documentation.Source = \"https://www.jaknapowerbi.cz\",\n        Documentation.Version = \" 1.0 \",\n        Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n        output,\n        Value.ReplaceMetadata(\n            Value.Type(output),\n            documentation\n        )\n    );\r\nshared getDatasetRefreshHistory = let\n    Source = let\n    output =\n        (generatedToken as text, datasetId as text) =>\n            let\n                apiCall =\n                    Json.Document(\n                        Web.Contents(\n                            \"https://api.powerbi.com/v1.0/myorg/admin\",\n                            [\n                                RelativePath =\n                                    \"datasets/\" & datasetId & \"/refreshes\",\n                                Headers = [\n                                    #\"Content-Type\" = \"application/json\",\n                                    Authorization = generatedToken\n                                ]\n                            ]\n                        )\n                    )\n            in\n                #table(\n                    type table [\n                        requestId = text,\n                        id = text,\n                        refreshType = text,\n                        startTime = datetime,\n                        endTime = datetime,\n                        status = text,\n                        refreshInSeconds = number\n                    ],\n                    List.Transform(\n                        apiCall[value],\n                        each\n                            let\n                                stTime = DateTime.From(_[startTime]?),\n                                enTime = DateTime.From(_[endTime]?),\n                                durationOfRefresh =\n                                    if stTime = null or enTime = null then\n                                        null\n                                    else\n                                        Duration.TotalSeconds(enTime - stTime)\n                            in\n                                {\n                                    _[requestId]?,\n                                    _[id]?,\n                                    _[refreshType]?,\n                                    stTime,\n                                    enTime,\n                                    _[status]?,\n                                    durationOfRefresh\n                                }\n                    )\n                ),\n    documentation = [\n        Documentation.Name = \" get-DatasetRefreshHistory.pq \",\n        Documentation.Description = \" Get the refresh history of a dataset \",\n        Documentation.Source = \"https://www.jaknapowerbi.cz\",\n        Documentation.Version = \" 1.0 \",\n        Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n        output,\n        Value.ReplaceMetadata(\n            Value.Type(output),\n            documentation\n        )\n    )\nin\n    Source;\r\nshared getDatasetRefreshHistoryAll = let\n    output =\n        (generatedToken as text, datasetId as text) =>\n            let\n                apiCall =\n                    Json.Document(\n                        Web.Contents(\n                            \"https://api.powerbi.com/v1.0/myorg\",\n                            [\n                                RelativePath =\n                                    \"admin/datasets/\"\n                                    & datasetId\n                                    & \"/refreshes\",\n                                Headers = [\n                                    #\"Content-Type\" = \"application/json\",\n                                    Authorization = generatedToken\n                                ]\n                            ]\n                        )\n                    )\n            in\n                #table(\n                    type table [\n                        requestId = text,\n                        id = text,\n                        refreshType = text,\n                        startTime = datetime,\n                        endTime = datetime,\n                        status = text,\n                        refreshInSeconds = number\n                    ],\n                    List.Transform(\n                        apiCall[value],\n                        each\n                            let\n                                stTime = DateTime.From(_[startTime]?),\n                                enTime = DateTime.From(_[endTime]?),\n                                durationOfRefresh =\n                                    if stTime = null or enTime = null then\n                                        null\n                                    else\n                                        Duration.TotalSeconds(enTime - stTime)\n                            in\n                                {\n                                    _[requestId]?,\n                                    _[id]?,\n                                    _[refreshType]?,\n                                    stTime,\n                                    enTime,\n                                    _[status]?,\n                                    durationOfRefresh\n                                }\n                    )\n                ),\n    documentation = [\n        Documentation.Name = \" get-DatasetRefreshHistory.pq \",\n        Documentation.Description = \" Get the refresh history of a dataset \",\n        Documentation.Source = \"https://www.jaknapowerbi.cz\",\n        Documentation.Version = \" 1.0 \",\n        Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n        output,\n        Value.ReplaceMetadata(\n            Value.Type(output),\n            documentation\n        )\n    );\r\nshared token = let\n    Source = getPBIToken(TenantID,ClientSecret,ClientID)\nin\n    Source;\r\nshared output = let\n  Source = getDatasetsAsAdminWithoutUsers(token),\n  #\"Remove columns\" = Table.RemoveColumns(Source, Table.ColumnsOfType(Source, {type table, type record, type list, type nullable binary, type binary, type function})),\n    #\"Invoked Custom Function\" = Table.AddColumn(#\"Remove columns\", \"getDatasetRefreshHistory\", each getDatasetRefreshHistory(token, [id])),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Invoked Custom Function\",{\"addRowsAPIEnabled\", \"configuredBy\", \"isRefreshable\", \"isEffectiveIdentityRequired\", \"isEffectiveIdentityRolesRequired\", \"isOnPremGatewayRequired\", \"webUrl\", \"targetStorageMode\", \"createdDate\", \"createReportEmbedURL\", \"qnaEmbedURL\"}),\n    #\"Added Custom\" = Table.AddColumn(#\"Removed Columns\", \"Custom\", each getDatasetRefreshHistoryAll(token,[id])),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Added Custom\",{\"getDatasetRefreshHistory\"}),\n    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Removed Columns1\", {\"Custom\"}),\n    #\"Expanded Custom\" = Table.ExpandTableColumn(#\"Removed Errors\", \"Custom\", {\"requestId\", \"id\", \"refreshType\", \"startTime\", \"endTime\", \"status\", \"refreshInSeconds\"}, {\"requestId\", \"id.1\", \"refreshType\", \"startTime\", \"endTime\", \"status\", \"refreshInSeconds\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Custom\",{{\"id\", type text}, {\"name\", type text}, {\"requestId\", type text}, {\"id.1\", Int64.Type}, {\"refreshType\", type text}, {\"startTime\", type datetime}, {\"endTime\", type datetime}, {\"status\", type text}, {\"refreshInSeconds\", type number}})\nin\n  #\"Changed Type\";\r\nshared TenantID = let\n    Source = \"4510a959-aa93-4f35-a3f5-e2249f4d35f6\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\nshared ClientID = let\n    Source = \"fe78c0c5-78b7-4b26-b890-4ca1e149a074\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\nshared ClientSecret = let\n    Source = \"xtw8Q~.xSg7yvXMsmHADNwEZgnEezNi6YqTLwaBP\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\n","connectionOverrides":[{"path":"https://login.windows.net/","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://login.windows.net/\"}","audience":null},{"path":"https://api.powerbi.com/v1.0/myorg/admin","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://api.powerbi.com/v1.0/myorg/admin\"}","audience":null}]},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"71654dd2-1acb-445a-8ea3-ce796084edb6\",\"name\":\"Functions\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"c5c18ee9-8ab1-463e-ac7d-3ab6d18f9348\",\"name\":\"Token\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"9c311d35-d038-4ac6-8db8-c1c5aeafdb78\",\"name\":\"Outputs\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"5feb534e-b251-40fa-b03e-2f2a7507acec\",\"name\":\"Parameters\",\"description\":\"\",\"parentId\":null,\"order\":1}]"}],"entities":[{"$type":"LocalEntity","name":"output","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"output.csv"},"attributes":[{"name":"id","dataType":"string"},{"name":"name","dataType":"string"},{"name":"requestId","dataType":"string"},{"name":"id.1","dataType":"int64"},{"name":"refreshType","dataType":"string"},{"name":"startTime","dataType":"dateTime"},{"name":"endTime","dataType":"dateTime"},{"name":"status","dataType":"string"},{"name":"refreshInSeconds","dataType":"double"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-12-02T11:32:11.9036182+00:00","location":"https://pugliaeaststoragemain.dfs.core.windows.net/powerbi/zPROD-Testing/bronzesilverRefreshHistory/output/output.csv.snapshots/output.csv@snapshot=2022-12-02T11:32:11.7630025Z"}]}]}