{"name":"silvergoldRefreshActivityAPI","description":"","version":"1.0","culture":"en-US","modifiedTime":"2022-11-10T03:37:28.3842074+00:00","ppdf:outputFileFormat":"Csv","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"getDatasetsAsAdminWithoutUsers":{"queryId":"bb4e2c72-b005-495f-98b2-d203e0c2254e","queryName":"getDatasetsAsAdminWithoutUsers","queryGroupId":"8c3a0e8d-76e6-4bc8-892c-25da90d11f42"},"getPBIToken":{"queryId":"6913a151-c52a-4a25-b8c8-4fa5c250f676","queryName":"getPBIToken","queryGroupId":"8c3a0e8d-76e6-4bc8-892c-25da90d11f42"},"getRefresh":{"queryId":"e511193b-0f46-4aae-bb63-9fe2d55b35ab","queryName":"getRefresh","queryGroupId":"8c3a0e8d-76e6-4bc8-892c-25da90d11f42"},"getDatasetRefreshHistory":{"queryId":"327de1fd-5ad9-4a43-9eb9-a5ebe71c8cf9","queryName":"getDatasetRefreshHistory","queryGroupId":"8c3a0e8d-76e6-4bc8-892c-25da90d11f42"},"getDatasetRefreshHistoryAll":{"queryId":"1774628c-c51d-452f-b1b6-fe767cb77384","queryName":"getDatasetRefreshHistoryAll","queryGroupId":"8c3a0e8d-76e6-4bc8-892c-25da90d11f42"},"token":{"queryId":"e9a0084a-7d77-4f9b-92a0-0a92764de4ec","queryName":"token","queryGroupId":"f546cd02-0f5e-4242-ba97-2c9493150cbd"},"RefreshHistory":{"queryId":"27edb15c-5c59-4355-8c41-890b5ae9baaf","queryName":"RefreshHistory","queryGroupId":"f0ab86d2-004a-4093-8e71-d2a55c62eb1b","loadEnabled":true},"TenantID":{"queryId":"936e04cb-bdfd-4246-9f3a-57d78374b2db","queryName":"TenantID","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"},"ClientID":{"queryId":"577474db-f039-44bd-b1ee-87fb6e2a61d4","queryName":"ClientID","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"},"ClientSecret":{"queryId":"ef93dcbe-a35e-4bf8-b972-f3c754032e9c","queryName":"ClientSecret","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"},"ActivityManual":{"queryId":"813aa7e6-5eca-4fac-afe2-37df3f9d3814","queryName":"ActivityManual","queryGroupId":"bb21074c-41bc-41cf-9624-eb4eff6ee301"},"biactnew":{"queryId":"ccef3804-c884-4051-944f-72d4949aa945","queryName":"biactnew","queryGroupId":"bb21074c-41bc-41cf-9624-eb4eff6ee301"},"pbiActOld":{"queryId":"1fa42c67-8ea1-4809-af24-8d2a41feaa1c","queryName":"pbiActOld","queryGroupId":"bb21074c-41bc-41cf-9624-eb4eff6ee301"},"biActAll":{"queryId":"edb427f7-b12f-4cef-a3f9-79cadfa08e1e","queryName":"biActAll","queryGroupId":"bb21074c-41bc-41cf-9624-eb4eff6ee301","loadEnabled":true},"GetToken":{"queryId":"c240688e-cf95-4e8d-b86a-f8383c1a4f54","queryName":"GetToken","queryGroupId":"f546cd02-0f5e-4242-ba97-2c9493150cbd"},"bronzeworkspaceid":{"queryId":"11495706-8b09-4ab8-b9ee-b5bd7b70d065","queryName":"bronzeworkspaceid","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"},"bronzescannerapidataflowid":{"queryId":"261d4ddd-28b9-4aa3-870c-759758bb54d4","queryName":"bronzescannerapidataflowid","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"},"scandatasourceinstancebr":{"queryId":"d2d7179f-3579-4d07-8413-c2ff861e1591","queryName":"scandatasourceinstancebr","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scanworkspaces":{"queryId":"8e615afe-088f-43a4-9ebf-1873b4bc5251","queryName":"scanworkspaces","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandatasets":{"queryId":"60bf77d5-9788-4cfe-a26b-cb8214b506ca","queryName":"scandatasets","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scancolumnmeasures":{"queryId":"acddb6f9-900d-4b62-8f5f-b17c02615948","queryName":"scancolumnmeasures","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandatasetdatasource":{"queryId":"b6af253d-a1d8-42ec-9cc0-cc4d6247fa85","queryName":"scandatasetdatasource","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandatasetusers":{"queryId":"d80a9548-7b30-4a32-80f8-b903436eada3","queryName":"scandatasetusers","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scanreports":{"queryId":"199acbbc-23b1-4fd0-aabd-b848891e79b9","queryName":"scanreports","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scanusers":{"queryId":"08ff5df8-8f92-44d7-bd72-c78e802b55eb","queryName":"scanusers","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandatasourceinst":{"queryId":"debfee3e-d03b-43a7-85ea-a2b84777b88f","queryName":"scandatasourceinst","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scantables":{"queryId":"54a08656-adc6-40bf-ba1f-f6956b2679f7","queryName":"scantables","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandataflows":{"queryId":"096d80c6-2801-4918-baf9-839e530b2536","queryName":"scandataflows","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandataflowsources":{"queryId":"7610105f-1e8b-471b-96de-f814fc2afd26","queryName":"scandataflowsources","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scandatasourcedim":{"queryId":"51ed523f-0c53-4d11-a183-9c58886aa484","queryName":"scandatasourcedim","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"scantablecolumnmeasures":{"queryId":"2a892958-77eb-48c6-af53-1425839ff4d3","queryName":"scantablecolumnmeasures","queryGroupId":"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7","loadEnabled":true},"datasetsload":{"queryId":"5ae1924f-65c6-4e56-b8ff-eec9d3c946d9","queryName":"datasetsload","queryGroupId":"3fa6c063-518b-4a2b-b606-7fa0d29e1f80"},"columns":{"queryId":"39db04d7-364d-4186-9b9b-c6355c6cef20","queryName":"columns","queryGroupId":"3fa6c063-518b-4a2b-b606-7fa0d29e1f80"},"measurefield":{"queryId":"ecf9a645-0434-4c2b-a513-51f53f2b8a6e","queryName":"measurefield","queryGroupId":"3fa6c063-518b-4a2b-b606-7fa0d29e1f80"},"dataflowload":{"queryId":"dd70b714-5bbc-4e12-ad77-10b00a7b97dd","queryName":"dataflowload","queryGroupId":"3fa6c063-518b-4a2b-b606-7fa0d29e1f80"},"tableload":{"queryId":"c373041f-ce47-4fae-aeef-e4dac30c8b21","queryName":"tableload","queryGroupId":"3fa6c063-518b-4a2b-b606-7fa0d29e1f80"},"scanResultID":{"queryId":"d12eb658-209b-461c-9dba-f3058a7c75dc","queryName":"scanResultID","queryGroupId":"3d901f8e-57bc-4322-9dd8-f058a2e4e73a"},"Result":{"queryId":"42366afb-e78c-42e1-a4cb-2933bca92143","queryName":"Result","queryGroupId":"3d901f8e-57bc-4322-9dd8-f058a2e4e73a"},"ws":{"queryId":"3acf0dd8-e1bc-4336-b9e0-7a25bc40ec2a","queryName":"ws","queryGroupId":"3d901f8e-57bc-4322-9dd8-f058a2e4e73a"},"bronzesharepointdataflowid":{"queryId":"183cc698-ff98-415c-9330-89c55dc7ec7e","queryName":"bronzesharepointdataflowid","queryGroupId":"680f8549-02ec-4b9c-bfdc-04c3e71f5348"}},"document":"section Section1;\r\nshared getDatasetsAsAdminWithoutUsers = let\n    Source = let\n    output =\n    (generatedToken as text) =>\n    let\n    apiCall =\n    Json.Document(\n    Web.Contents(\n    \"https://api.powerbi.com/v1.0/myorg/admin\",\n    [\n    RelativePath = \"datasets\",\n    Headers = [\n    #\"Content-Type\" = \"application/json\",\n    Authorization = generatedToken\n    ]\n    ]\n    )\n    )\nin\n    #table(\n    type table [\n    id = text,\n    name = text,\n    addRowsAPIEnabled = logical,\n    configuredBy = text,\n    isRefreshable = logical,\n    isEffectiveIdentityRequired = logical,\n    isEffectiveIdentityRolesRequired = logical,\n    isOnPremGatewayRequired = text,\n    webUrl = text,\n    targetStorageMode = text,\n    createdDate = datetime,\n    createReportEmbedURL = text,\n    qnaEmbedURL = text,\n    upstreamDatasets = list\n    ],\n    List.Transform(\n    apiCall[value],\n    each\n    {\n    _[id]?,\n    _[name]?,\n    _[addRowsAPIEnabled]?,\n    _[configuredBy]?,\n    _[isRefreshable]?,\n    _[isEffectiveIdentityRequired]?,\n    _[isEffectiveIdentityRolesRequired]?,\n    _[isOnPremGatewayRequired]?,\n    _[webUrl]?,\n    _[targetStorageMode]?,\n    DateTime.From(_[createdDate]?),\n    _[createReportEmbedURL]?,\n    _[qnaEmbedURL]?,\n    _[upstreamDatasets]?\n    }\n    )\n    ),\n    documentation = [\n    Documentation.Name = \" get-Capacities.pq \",\n    Documentation.Description = \" Get all capacities in tenant \",\n    Documentation.Source = \"https://www.jaknapowerbi.cz\",\n    Documentation.Version = \" 1.0 \",\n    Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n    output,\n    Value.ReplaceMetadata(\n    Value.Type(output),\n    documentation\n    )\n    )\nin\n    Source;\r\nshared getPBIToken = let\n    Source = let\n    output =\n    (AzureADTenantID as text, AzureApplicationClientSecret as text, AzureApplicationClientID as text) as text =>\n    let\n    resource = \"https://analysis.windows.net/powerbi/api\",\n    tokenResponse =\n    Json.Document(\n    Web.Contents(\n    \"https://login.windows.net\",\n    [\n    RelativePath = AzureADTenantID & \"/oauth2/token\",\n    Content =\n    Text.ToBinary(\n    Uri.BuildQueryString(\n    [\n    client_id = AzureApplicationClientID,\n    resource = resource,\n    grant_type = \"client_credentials\",\n    client_secret = AzureApplicationClientSecret\n    ]\n    )\n    ),\n    Headers = [\n    Accept = \"application/json\"\n    ],\n    ManualStatusHandling = {\n    400\n    }\n    ]\n    )\n    ),\n    token_output =\n    tokenResponse[token_type]\n    & \" \"\n    & tokenResponse[access_token]\nin\n    token_output,\n    documentation = [\n    Documentation.Name = \" get-BearerToken.pq \",\n    Documentation.Description = \" Get Bearer Token needed for Power BI REST API calls \",\n    Documentation.Source = \"https://www.jaknapowerbi.cz\",\n    Documentation.Version = \" 1.0 \",\n    Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n    output,\n    Value.ReplaceMetadata(\n    Value.Type(output),\n    documentation\n    )\n    )\nin\n    Source;\r\nshared getRefresh = let\n    output =\n    (generatedToken as text, datasetId as text) =>\n    let\n    apiCall =\n    Json.Document(\n    Web.Contents(\n    \"https://api.powerbi.com/v1.0/myorg\",\n    [\n    RelativePath = \"admin/capacities/refreshables\",\n    Query = [\n    #\"$expand\" = \"capacity,group\"\n    ],\n    Headers = [\n    #\"Content-Type\" = \"application/json\",\n    Authorization = generatedToken\n    ]\n    ]\n    )\n    )\nin\n    #table(\n    type table [\n    id = text,\n    name = text,\n    kind = text,\n    startTime = datetime,\n    endTime = datetime,\n    refreshCount = number,\n    refreshFailures = number,\n    averageDuration = number,\n    medianDuration = number,\n    refreshesPerDay = number,\n    lastRefresh = record,\n    refreshSchedule.days = list,\n    refreshSchedule.times = list,\n    refreshSchedule.enabled = logical,\n    refreshSchedule.localTimeZoneId = text,\n    refreshSchedule.notifyOption = text,\n    configuredBy = text,\n    capacity = record,\n    group = record\n    ],\n    List.Transform(\n    apiCall[value],\n    each\n    {\n    _[id]?,\n    _[name]?,\n    _[kind]?,\n    _[startTime]?,\n    _[endTime]?,\n    _[refreshCount]?,\n    _[refreshFailures]?,\n    _[averageDuration]?,\n    _[medianDuration]?,\n    _[refreshesPerDay]?,\n    _[lastRefresh]?,\n    _[refreshSchedule]?[days]?,\n    _[refreshSchedule]?[times]?,\n    _[refreshSchedule]?[enabled]?,\n    _[refreshSchedule]?[localTImeZoneId]?,\n    _[refreshSchedule]?[notifyOption]?,\n    _[configuredBy]?{0}?,\n    _[capacity]?,\n    _[group]?\n    }\n    )\n    ),\n    documentation = [\n    Documentation.Name = \" get-Refreshables.pq \",\n    Documentation.Description = \" Get refreshable datasets \",\n    Documentation.Source = \"https://www.jaknapowerbi.cz\",\n    Documentation.Version = \" 1.0 \",\n    Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n    output,\n    Value.ReplaceMetadata(\n    Value.Type(output),\n    documentation\n    )\n    );\r\nshared getDatasetRefreshHistory = let\n    Source = let\n    output =\n    (generatedToken as text, datasetId as text) =>\n    let\n    apiCall =\n    Json.Document(\n    Web.Contents(\n    \"https://api.powerbi.com/v1.0/myorg/admin\",\n    [\n    RelativePath =\n    \"datasets/\" & datasetId & \"/refreshes\",\n    Headers = [\n    #\"Content-Type\" = \"application/json\",\n    Authorization = generatedToken\n    ]\n    ]\n    )\n    )\nin\n    #table(\n    type table [\n    requestId = text,\n    id = text,\n    refreshType = text,\n    startTime = datetime,\n    endTime = datetime,\n    status = text,\n    refreshInSeconds = number\n    ],\n    List.Transform(\n    apiCall[value],\n    each\n    let\n    stTime = DateTime.From(_[startTime]?),\n    enTime = DateTime.From(_[endTime]?),\n    durationOfRefresh =\n    if stTime = null or enTime = null then\n    null\n    else\n    Duration.TotalSeconds(enTime - stTime)\nin\n    {\n    _[requestId]?,\n    _[id]?,\n    _[refreshType]?,\n    stTime,\n    enTime,\n    _[status]?,\n    durationOfRefresh\n    }\n    )\n    ),\n    documentation = [\n    Documentation.Name = \" get-DatasetRefreshHistory.pq \",\n    Documentation.Description = \" Get the refresh history of a dataset \",\n    Documentation.Source = \"https://www.jaknapowerbi.cz\",\n    Documentation.Version = \" 1.0 \",\n    Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n    output,\n    Value.ReplaceMetadata(\n    Value.Type(output),\n    documentation\n    )\n    )\nin\n    Source;\r\nshared getDatasetRefreshHistoryAll = let\n    output =\n    (generatedToken as text, datasetId as text) =>\n    let\n    apiCall =\n    Json.Document(\n    Web.Contents(\n    \"https://api.powerbi.com/v1.0/myorg\",\n    [\n    RelativePath =\n    \"admin/datasets/\"\n    & datasetId\n    & \"/refreshes\",\n    Headers = [\n    #\"Content-Type\" = \"application/json\",\n    Authorization = generatedToken\n    ]\n    ]\n    )\n    )\nin\n    #table(\n    type table [\n    requestId = text,\n    id = text,\n    refreshType = text,\n    startTime = datetime,\n    endTime = datetime,\n    status = text,\n    refreshInSeconds = number\n    ],\n    List.Transform(\n    apiCall[value],\n    each\n    let\n    stTime = DateTime.From(_[startTime]?),\n    enTime = DateTime.From(_[endTime]?),\n    durationOfRefresh =\n    if stTime = null or enTime = null then\n    null\n    else\n    Duration.TotalSeconds(enTime - stTime)\nin\n    {\n    _[requestId]?,\n    _[id]?,\n    _[refreshType]?,\n    stTime,\n    enTime,\n    _[status]?,\n    durationOfRefresh\n    }\n    )\n    ),\n    documentation = [\n    Documentation.Name = \" get-DatasetRefreshHistory.pq \",\n    Documentation.Description = \" Get the refresh history of a dataset \",\n    Documentation.Source = \"https://www.jaknapowerbi.cz\",\n    Documentation.Version = \" 1.0 \",\n    Documentation.Author = \" Štěpán Rešl \"\n    ]\nin\n    Value.ReplaceType(\n    output,\n    Value.ReplaceMetadata(\n    Value.Type(output),\n    documentation\n    )\n    );\r\nshared token = let\n    Source = getPBIToken(TenantID,ClientSecret,ClientID)\nin\n    Source;\r\nshared RefreshHistory = let\n    Source = getDatasetsAsAdminWithoutUsers(token),\n    #\"Remove columns\" = Table.RemoveColumns(Source, Table.ColumnsOfType(Source, {type table, type record, type list, type nullable binary, type binary, type function})),\n    #\"Invoked Custom Function\" = Table.AddColumn(#\"Remove columns\", \"getDatasetRefreshHistory\", each getDatasetRefreshHistory(token, [id])),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Invoked Custom Function\",{\"addRowsAPIEnabled\", \"configuredBy\", \"isRefreshable\", \"isEffectiveIdentityRequired\", \"isEffectiveIdentityRolesRequired\", \"isOnPremGatewayRequired\", \"webUrl\", \"targetStorageMode\", \"createdDate\", \"createReportEmbedURL\", \"qnaEmbedURL\"}),\n    #\"Added Custom\" = Table.AddColumn(#\"Removed Columns\", \"Custom\", each getDatasetRefreshHistoryAll(token,[id])),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Added Custom\",{\"getDatasetRefreshHistory\"}),\n    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Removed Columns1\", {\"Custom\"}),\n    #\"Expanded Custom\" = Table.ExpandTableColumn(#\"Removed Errors\", \"Custom\", {\"requestId\", \"id\", \"refreshType\", \"startTime\", \"endTime\", \"status\", \"refreshInSeconds\"}, {\"requestId\", \"id.1\", \"refreshType\", \"startTime\", \"endTime\", \"status\", \"refreshInSeconds\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Custom\",{{\"id\", type text}, {\"name\", type text}, {\"requestId\", type text}, {\"id.1\", Int64.Type}, {\"refreshType\", type text}, {\"startTime\", type datetime}, {\"endTime\", type datetime}, {\"status\", type text}, {\"refreshInSeconds\", type number}})\nin\n    #\"Changed Type\";\r\nshared TenantID = let\n    Source = \"8c39a7ff-e077-4d1c-9a1c-7431fe5eb465\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\nshared ClientID = let\n    Source = \"a35929cb-f3e6-4f0a-b47d-00b069906d99\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\nshared ClientSecret = let\n    Source = \"CVh7Q~Axzi~ZMfZISblWD8_geYKbf39_Xx3Kd\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\nin\n    Source;\r\nshared ActivityManual = let\n    Source = PowerPlatform.Dataflows([]),\n    #\"Navigation 1\" = Source{[Id = \"Workspaces\"]}[Data],\n    #\"Navigation 2\" = #\"Navigation 1\"{[workspaceId = \"db28e4f3-c31e-42db-a129-1a38a0e04116\"]}[Data],\n    #\"Navigation 3\" = #\"Navigation 2\"{[dataflowId = \"97427a03-0097-42f9-9f55-c90e8d802c46\"]}[Data],\n    #\"Navigation 4\" = #\"Navigation 3\"{[entity = \"ActivityManual\", version = \"\"]}[Data]\nin\n    #\"Navigation 4\";\r\nshared biactnew = let\n    Source = PowerPlatform.Dataflows([]),\n    #\"Navigation 1\" = Source{[Id = \"Workspaces\"]}[Data],\n    #\"Navigation 2\" = #\"Navigation 1\"{[workspaceId = \"db28e4f3-c31e-42db-a129-1a38a0e04116\"]}[Data],\n    #\"Navigation 3\" = #\"Navigation 2\"{[dataflowId = \"42a67042-44c6-4a15-8076-a5b2630adcb8\"]}[Data],\n    #\"Navigation 4\" = #\"Navigation 3\"{[entity = \"biactnew\", version = \"\"]}[Data]\nin\n    #\"Navigation 4\";\r\nshared pbiActOld = let\n    Source = PowerPlatform.Dataflows([]),\n    #\"Navigation 1\" = Source{[Id = \"Workspaces\"]}[Data],\n    #\"Navigation 2\" = #\"Navigation 1\"{[workspaceId = bronzeworkspaceid]}[Data],\n    #\"Navigation 3\" = #\"Navigation 2\"{[dataflowId = bronzesharepointdataflowid]}[Data],\n    #\"Navigation 4\" = #\"Navigation 3\"{[entity = \"pbiActOld\", version = \"\"]}[Data],\n        #\"Changed Type\" = Table.TransformColumnTypes(  #\"Navigation 4\" ,{{\"CreationTime\", type datetimezone}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"CreationTime\", type datetime}}),\n    #\"Removed Columns2\" = Table.RemoveColumns(#\"Changed Type1\",{\"UserType\", \"UserKey\", \"ClientIP\", \"DashboardId\", \"Datasets\", \"IsSuccess\", \"RequestId\", \"ActivityId\", \"ReportId\"}),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Removed Columns2\",{ {\"Id\", type text}, {\"RecordType\", Int64.Type}, {\"CreationTime\", type datetime}, {\"Operation\", type text}, {\"OrganizationId\", type text}, {\"Workload\", type text}, {\"UserId\", type text}, {\"UserAgent\", type text}, {\"Activity\", type text}, {\"ItemName\", type text}, {\"WorkSpaceName\", type text}, {\"DashboardName\", type text}, {\"ObjectId\", type text}, {\"ConsumptionMethod\", type text}, {\"DatasetName\", type any}, {\"ReportName\", type any}, {\"ReportType\", type any}}),\n    #\"Inserted Date\" = Table.AddColumn(#\"Changed Type2\", \"Date\", each DateTime.Date([CreationTime]), type date),\n    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Inserted Date\",{{\"ReportType\", type text}, {\"ReportName\", type text}, {\"DatasetName\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type3\",\"?\",\"-\",Replacer.ReplaceText,{\"ItemName\", \"WorkSpaceName\"}),\n    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"DatasetId\", type text}, {\"WorkspaceId\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type4\",{{\"CreationTime\", \"CreationDate\"}, {\"Date\", \"CreationDateOnly\"}})\nin\n    #\"Renamed Columns\";\r\nshared biActAll = let\n    Source = Table.Combine({pbiActOld, ActivityManual}),\n    RemoveDup = Table.Distinct(Source, {\"Id\"}),\n    #\"Transform columns\" = Table.TransformColumnTypes(RemoveDup, {{\"CreationTime\", type datetime}, {\"Id\", type text}}),\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"CreationTime\", null}, {\"Id\", null}})\nin\n    #\"Replace errors\";\r\nshared GetToken = let\n    Source = () =>\nlet\n    body = \"grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=\"&ClientID&\"&client_secret=\"&ClientSecret,\n    Data=Json.Document(Web.Contents(\"https://login.microsoftonline.com/\"&TenantID&\"/oauth2/token\", [Headers=[#\"Content-Type\"=\"application/x-www-form-urlencoded\"], Content=Text.ToBinary(body)])),\n    access_token = Data[access_token]\nin\n    access_token\nin\n    Source;\r\nshared bronzeworkspaceid = \"db28e4f3-c31e-42db-a129-1a38a0e04116\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared bronzescannerapidataflowid = \"97427a03-0097-42f9-9f55-c90e8d802c46\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared scandatasourceinstancebr = let\n    Source = Result,\n    datasourceInstances = Source[datasourceInstances],\n    #\"Converted to Table\" = Table.FromList(datasourceInstances, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}, {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Column1\",{\"connectionDetails\"}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Columns\", {\"datasourceId\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Duplicates\",{{\"datasourceType\", type text}, {\"datasourceId\", type text}, {\"gatewayId\", type text}})\nin\n    #\"Changed Type\";\r\nshared scanworkspaces = let\n    Source = ws,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"reports\", \"dashboards\", \"datasets\", \"dataflows\", \"datamarts\", \"users\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"id\", type text}, {\"name\", type text}, {\"type\", type text}, {\"state\", type text}, {\"isOnDedicatedCapacity\", type logical}, {\"capacityId\", type text}})\nin\n    #\"Changed Type\";\r\nshared scandatasets = let\n    Source = datasetsload,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"tables\", \"datasourceUsages\", \"users\", \"misconfiguredDatasourceUsages\", \"upstreamDataflows\", \"endorsementDetails\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\", {{\"workspaceid\", type text}, {\"workspaceName\", type text}, {\"datasetid\", type text}, {\"datasetName\", type text}, {\"configuredBy\", type text}, {\"configuredById\", type text}, {\"isEffectiveIdentityRequired\", type logical}, {\"isEffectiveIdentityRolesRequired\", type logical}, {\"targetStorageMode\", type text}, {\"createdDate\", type datetime}, {\"contentProviderType\", type text}, {\"description\", type text}, {\"schemaRetrievalError\", type text}, {\"schemaMayNotBeUpToDate\", type text}}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Changed Type\", each ([datasetid] <> null))\nin\n    #\"Filtered rows\";\r\nshared scancolumnmeasures = let\n  Source = tableload,\n    #\"Expanded columns\" = Table.ExpandListColumn(Source, \"columns\"),\n    #\"Expanded columns1\" = Table.ExpandRecordColumn(#\"Expanded columns\", \"columns\", {\"name\", \"dataType\", \"isHidden\", \"columnType\"}, {\"columnName\", \"dataType\", \"isHiddenColumn\", \"columnType\"}),\n    #\"Expanded measures\" = Table.ExpandListColumn(#\"Expanded columns1\", \"measures\"),\n    #\"Expanded measures1\" = Table.ExpandRecordColumn(#\"Expanded measures\", \"measures\", {\"name\", \"expression\", \"isHidden\"}, {\"measureName\", \"expression\", \"isHiddenMeasure\"}),\n    #\"Expanded source\" = Table.ExpandListColumn(#\"Expanded measures1\", \"source\"),\n    #\"Expanded source1\" = Table.ExpandRecordColumn(#\"Expanded source\", \"source\", {\"expression\"}, {\"sourceExpression\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded source1\", {{\"workspaceid\", type text}, {\"datasetid\", type text}, {\"tableName\", type text}, {\"columnName\", type text}, {\"dataType\", type text}, {\"isHiddenColumn\", type logical}, {\"columnType\", type text}, {\"measureName\", type text}, {\"expression\", type text}, {\"isHiddenMeasure\", type logical}, {\"isHiddenTable\", type logical}, {\"sourceExpression\", type text}, {\"WSIDDSID_ID\", type text}})\nin\n    #\"Changed column type\";\r\nshared scandatasetdatasource = let\n    Source = datasetsload,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source, {\"datasetid\", \"datasourceUsages\", \"users\", \"misconfiguredDatasourceUsages\", \"upstreamDataflows\"}),\n    #\"Expanded datasourceUsages\" = Table.ExpandListColumn(#\"Removed Other Columns\", \"datasourceUsages\"),\n    #\"Expanded datasourceUsages1\" = Table.ExpandRecordColumn(#\"Expanded datasourceUsages\", \"datasourceUsages\", {\"datasourceInstanceId\"}, {\"datasourceInstanceId\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded datasourceUsages1\",{\"users\", \"upstreamDataflows\", \"misconfiguredDatasourceUsages\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"datasetid\", type text}, {\"datasourceInstanceId\", type text}})\nin\n    #\"Changed Type\";\r\nshared scandatasetusers = let\n    Source = datasetsload,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source, {\"workspaceid\", \"datasetid\", \"datasourceUsages\", \"users\", \"misconfiguredDatasourceUsages\", \"upstreamDataflows\", \"WSIDDSID_ID\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Removed Other Columns\",{\"datasourceUsages\", \"upstreamDataflows\", \"misconfiguredDatasourceUsages\"}),\n    #\"Expanded users\" = Table.ExpandListColumn(#\"Removed Columns\", \"users\"),\n    #\"Expanded users1\" = Table.ExpandRecordColumn(#\"Expanded users\", \"users\", {\"datasetUserAccessRight\", \"emailAddress\", \"displayName\", \"identifier\", \"graphId\", \"principalType\", \"userType\"}, {\"datasetUserAccessRight\", \"emailAddress\", \"displayName\", \"identifier\", \"graphId\", \"principalType\", \"userType\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded users1\", {{\"workspaceid\", type text}, {\"datasetid\", type text}, {\"datasetUserAccessRight\", type text}, {\"emailAddress\", type text}, {\"displayName\", type text}, {\"identifier\", type text}, {\"graphId\", type text}, {\"principalType\", type text}, {\"userType\", type text}, {\"WSIDDSID_ID\", type text}})\nin\n    #\"Changed column type\";\r\nshared scanreports = let\n    Source = ws,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source, {\"id\", \"name\", \"isOnDedicatedCapacity\", \"capacityId\", \"reports\"}),\n  #\"Renamed columns\" = Table.RenameColumns(#\"Removed Other Columns\", {{\"id\", \"workspaceid\"}, {\"name\", \"workspaceName\"}}),\n    #\"Expanded reports\" = Table.ExpandListColumn(#\"Renamed columns\", \"reports\"),\n    #\"Expanded reports1\" = Table.ExpandRecordColumn(#\"Expanded reports\", \"reports\", {\"reportType\", \"id\", \"name\", \"datasetId\", \"createdDateTime\", \"modifiedDateTime\", \"modifiedBy\", \"createdBy\", \"modifiedById\", \"createdById\", \"users\", \"appId\", \"datasetWorkspaceId\"}, {\"reportType\", \"id.1\", \"name\", \"datasetId\", \"createdDateTime\", \"modifiedDateTime\", \"modifiedBy\", \"createdBy\", \"modifiedById\", \"createdById\", \"users\", \"appId\", \"datasetWorkspaceId\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded reports1\",{\"users\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"reportType\", type text}, {\"workspaceid\", type text}, {\"workspaceName\", type text}, {\"datasetId\", type text}, {\"createdDateTime\", type datetime}, {\"modifiedDateTime\", type datetime}, {\"modifiedBy\", type text}, {\"createdBy\", type text}, {\"modifiedById\", type text}, {\"createdById\", type text}, {\"appId\", type text}, {\"datasetWorkspaceId\", type text}}),\n  #\"Renamed columns 1\" = Table.RenameColumns(#\"Changed Type\", {{\"id.1\", \"reportid\"}, {\"name\", \"reportName\"}}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Renamed columns 1\", {{\"workspaceid\", type text}, {\"workspaceName\", type text}, {\"isOnDedicatedCapacity\", type logical}, {\"capacityId\", type text}, {\"reportType\", type text}, {\"reportid\", type text}, {\"reportName\", type text}, {\"datasetId\", type text}, {\"createdDateTime\", type datetime}, {\"modifiedDateTime\", type datetime}, {\"modifiedBy\", type text}, {\"createdBy\", type text}, {\"modifiedById\", type text}, {\"createdById\", type text}, {\"appId\", type text}, {\"datasetWorkspaceId\", type text}}),\n  #\"Inserted merged column\" = Table.AddColumn(#\"Changed column type\", \"WSIDDSID_ID\", each Text.Combine({[workspaceid], [datasetId]}, \"_\"), type text)\nin\n    #\"Inserted merged column\";\r\nshared scanusers = let\n    Source = ws,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"id\", \"users\"}),\n    #\"Expanded users\" = Table.ExpandListColumn(#\"Removed Other Columns\", \"users\"),\n    #\"Expanded users1\" = Table.ExpandRecordColumn(#\"Expanded users\", \"users\", {\"groupUserAccessRight\", \"emailAddress\", \"displayName\", \"identifier\", \"graphId\", \"principalType\", \"userType\"}, {\"groupUserAccessRight\", \"emailAddress\", \"displayName\", \"identifier\", \"graphId\", \"principalType\", \"userType\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded users1\",{{\"id\", type text}, {\"groupUserAccessRight\", type text}, {\"emailAddress\", type text}, {\"displayName\", type text}, {\"identifier\", type text}, {\"graphId\", type text}, {\"principalType\", type text}, {\"userType\", type text}})\nin\n    #\"Changed Type\";\r\nshared scandatasourceinst = let\n    Source = Result,\n    datasourceInstances = Source[datasourceInstances],\n    #\"Converted to Table\" = Table.FromList(datasourceInstances, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}, {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}),\n    #\"Expanded connectionDetails\" = Table.ExpandRecordColumn(#\"Expanded Column1\", \"connectionDetails\", {\"sharePointSiteUrl\", \"server\", \"database\"}, {\"sharePointSiteUrl\", \"server\", \"database\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded connectionDetails\",{{\"datasourceType\", type text}, {\"sharePointSiteUrl\", type text}, {\"server\", type text}, {\"database\", type text}, {\"datasourceId\", type text}, {\"gatewayId\", type text}})\nin\n    #\"Changed Type\";\r\nshared scantables = let\n  Source = tableload,\n  #\"Filtered rows\" = Table.SelectRows(Source, each ([tableName] <> null)),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Filtered rows\", {\"columns\", \"measures\", \"isHiddenTable\"}),\n  #\"Expanded source\" = Table.ExpandListColumn(#\"Removed columns\", \"source\"),\n  #\"Expanded source 1\" = Table.ExpandRecordColumn(#\"Expanded source\", \"source\", {\"expression\"}, {\"expression\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded source 1\", {{\"tableName\", type text}, {\"workspaceid\", type text}, {\"datasetid\", type text}, {\"WSIDDSID_ID\", type text}, {\"tabledataset\", type text}, {\"expression\", type text}})\nin\n  #\"Changed column type\";\r\nshared scandataflows = let\r\n  Source = dataflowload,\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"datasourceUsages\"}),\r\n  #\"Filtered rows\" = Table.SelectRows(#\"Removed columns\", each [dataflowid] <> null),\r\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Filtered rows\", {{\"users.1\", type text}}),\r\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"users.1\", null}})\r\nin\r\n  #\"Replace errors\";\r\nshared scandataflowsources = let\n  Source = dataflowload,\n  #\"Removed other columns\" = Table.SelectColumns(Source, {\"workspaceid\", \"dataflowid\", \"datasourceUsages\"}),\n  #\"Expanded datasourceUsages\" = Table.ExpandListColumn(#\"Removed other columns\", \"datasourceUsages\"),\n  #\"Expanded datasourceUsages 1\" = Table.ExpandRecordColumn(#\"Expanded datasourceUsages\", \"datasourceUsages\", {\"datasourceInstanceId\"}, {\"datasourceInstanceId\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded datasourceUsages 1\", {{\"datasourceInstanceId\", type text}}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Changed column type\", each ([datasourceInstanceId] <> null))\nin\n  #\"Filtered rows\";\r\nshared scandatasourcedim = let\n  Data = Json.Document(Web.Contents(\"https://api.powerbi.com/v1.0/myorg/\",\n    [\n        RelativePath= \"admin/workspaces/scanResult/\" & scanResultID,\n    \n    \n     \n\n       Headers=[Authorization=\"Bearer \" & GetToken()]\n    ]\n    )),\n  Navigation = Data[datasourceInstances],\n  #\"Converted to table\" = Table.FromList(Navigation, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n  #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to table\", \"Column1\", {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}, {\"datasourceType\", \"connectionDetails\", \"datasourceId\", \"gatewayId\"}),\n  #\"Expanded connectionDetails\" = Table.ExpandRecordColumn(#\"Expanded Column1\", \"connectionDetails\", {\"sharePointSiteUrl\", \"server\", \"database\"}, {\"sharePointSiteUrl\", \"server\", \"database\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded connectionDetails\", {{\"datasourceType\", type text}, {\"sharePointSiteUrl\", type text}, {\"server\", type text}, {\"database\", type text}, {\"datasourceId\", type text}, {\"gatewayId\", type text}}),\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Changed column type\", \"server_primary\", each if [server] = null then [sharePointSiteUrl] else [server]),\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Inserted conditional column\", {{\"datasourceType\", type text}, {\"sharePointSiteUrl\", type text}, {\"server\", type text}, {\"database\", type text}, {\"datasourceId\", type text}, {\"gatewayId\", type text}, {\"server_primary\", type text}})\nin\n  #\"Changed column type 1\";\r\nshared scantablecolumnmeasures = let\n  Source = Table.Combine({measurefield,columns})\nin\n  Source;\r\nshared datasetsload = let\n    Source = ws,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"id\", \"name\", \"datasets\"}),\n    #\"Expanded datasets\" = Table.ExpandListColumn(#\"Removed Other Columns\", \"datasets\"),\n  #\"Renamed columns\" = Table.RenameColumns(#\"Expanded datasets\", {{\"id\", \"workspaceid\"}, {\"name\", \"workspaceName\"}}),\n    #\"Expanded datasets1\" = Table.ExpandRecordColumn(#\"Renamed columns\", \"datasets\", {\"id\", \"name\", \"tables\", \"configuredBy\", \"configuredById\", \"isEffectiveIdentityRequired\", \"isEffectiveIdentityRolesRequired\", \"targetStorageMode\", \"createdDate\", \"contentProviderType\", \"datasourceUsages\", \"users\", \"misconfiguredDatasourceUsages\", \"upstreamDataflows\", \"description\", \"endorsementDetails\", \"schemaRetrievalError\", \"schemaMayNotBeUpToDate\"}, {\"id.1\", \"name.1\", \"tables\", \"configuredBy\", \"configuredById\", \"isEffectiveIdentityRequired\", \"isEffectiveIdentityRolesRequired\", \"targetStorageMode\", \"createdDate\", \"contentProviderType\", \"datasourceUsages\", \"users\", \"misconfiguredDatasourceUsages\", \"upstreamDataflows\", \"description\", \"endorsementDetails\", \"schemaRetrievalError\", \"schemaMayNotBeUpToDate\"}),\n  #\"Renamed columns 1\" = Table.RenameColumns(#\"Expanded datasets1\", {{\"id.1\", \"datasetid\"}, {\"name.1\", \"datasetName\"}}),\n  #\"Inserted merged column\" = Table.AddColumn(#\"Renamed columns 1\", \"WSIDDSID_ID\", each Text.Combine({Text.From([workspaceid]), Text.From([datasetid])}, \"_\"), type text)\nin\n    #\"Inserted merged column\";\r\nshared columns = let\n  Source = tableload,\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"datasetid\", \"workspaceid\", \"isHiddenTable\", \"WSIDDSID_ID\", \"measures\"}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Removed columns\", each ([columns] <> null)),\n  #\"Expanded columns\" = Table.ExpandListColumn(#\"Filtered rows\", \"columns\"),\n  #\"Expanded columns 1\" = Table.ExpandRecordColumn(#\"Expanded columns\", \"columns\", {\"name\", \"dataType\", \"isHidden\", \"columnType\"}, {\"name\", \"dataType\", \"isHidden\", \"columnType\"}),\n  #\"Expanded source\" = Table.ExpandListColumn(#\"Expanded columns 1\", \"source\"),\n  #\"Expanded source 1\" = Table.ExpandRecordColumn(#\"Expanded source\", \"source\", {\"expression\"}, {\"expression\"}),\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Expanded source 1\", {\"expression\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed columns 1\", {{\"tableName\", type text}, {\"name\", type text}, {\"dataType\", type text}, {\"isHidden\", type logical}, {\"columnType\", type text}, {\"tabledataset\", type text}}),\n  AddT = Table.TransformColumnTypes(Table.AddColumn(#\"Changed column type\", \"Type\", each \"Column\"), {{\"Type\", type text}})\nin\nAddT;\r\nshared measurefield = let\n  Source = tableload,\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"datasetid\", \"workspaceid\", \"isHiddenTable\", \"WSIDDSID_ID\", \"columns\"}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Removed columns\", each ([measures] <> null)),\n  #\"Expanded measures\" = Table.ExpandListColumn(#\"Filtered rows\", \"measures\"),\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Expanded measures\", each ([measures] <> null)),\n  #\"Expanded measures 1\" = Table.ExpandRecordColumn(#\"Filtered rows 1\", \"measures\", {\"name\", \"expression\", \"isHidden\"}, {\"name\", \"expression\", \"isHidden\"}),\n  #\"Expanded source\" = Table.ExpandListColumn(#\"Expanded measures 1\", \"source\"),\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Expanded source\", {\"source\"}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed columns 1\", {{\"tableName\", type text}, {\"name\", type text}, {\"expression\", type text}, {\"isHidden\", type logical}, {\"tabledataset\", type text}}),\n  #\"Added custom\" = Table.TransformColumnTypes(Table.AddColumn(#\"Changed column type\", \"Type\", each \"Measure\"), {{\"Type\", type text}})\nin\n  #\"Added custom\";\r\nshared dataflowload = let\n  Source = ws,\n  #\"Choose columns\" = Table.SelectColumns(Source, {\"id\", \"dataflows\", \"users\"}),\n  #\"Renamed columns\" = Table.RenameColumns(#\"Choose columns\", {{\"id\", \"workspaceid\"}}),\n  #\"Expanded dataflows\" = Table.ExpandListColumn(#\"Renamed columns\", \"dataflows\"),\n  #\"Expanded dataflows 1\" = Table.ExpandRecordColumn(#\"Expanded dataflows\", \"dataflows\", {\"objectId\", \"name\", \"description\", \"configuredBy\", \"modifiedBy\", \"modifiedDateTime\", \"users\", \"datasourceUsages\"}, {\"objectId\", \"name\", \"description\", \"configuredBy\", \"modifiedBy\", \"modifiedDateTime\", \"users.1\", \"datasourceUsages\"}),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Expanded dataflows 1\", {\"users\"}),\n  #\"Renamed columns 1\" = Table.RenameColumns(#\"Removed columns\", {{\"name\", \"dataflowName\"}}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Renamed columns 1\", {{\"workspaceid\", type text}, {\"objectId\", type text}, {\"dataflowName\", type text}, {\"description\", type text}, {\"configuredBy\", type text}, {\"modifiedBy\", type text}, {\"modifiedDateTime\", type datetime}, {\"users.1\", type any}, {\"datasourceUsages\", type any}}),\n  #\"Renamed columns 2\" = Table.RenameColumns(#\"Changed column type\", {{\"objectId\", \"dataflowid\"}})\nin\n  #\"Renamed columns 2\";\r\nshared tableload = let\n  Source = datasetsload,\n  #\"Removed Other Columns\" = Table.SelectColumns(Source, {\"workspaceid\", \"datasetid\", \"tables\", \"WSIDDSID_ID\"}),\n  #\"Expanded tables\" = Table.ExpandListColumn(#\"Removed Other Columns\", \"tables\"),\n  #\"Expanded tables1\" = Table.ExpandRecordColumn(#\"Expanded tables\", \"tables\", {\"name\", \"columns\", \"measures\", \"isHidden\", \"source\"}, {\"tableName\", \"columns\", \"measures\", \"isHiddenTable\", \"source\"}),\n  #\"Inserted merged column\" = Table.AddColumn(#\"Expanded tables1\", \"tabledataset\", each Text.Combine({Text.From([datasetid]), Text.From([tableName])}, \"_\"), type text)\nin\n  #\"Inserted merged column\";\r\nshared scanResultID = let\n    Source = PowerBI.Dataflows(null),\nbronzeworkspaceid= Source{[workspaceId=bronzeworkspaceid]}[Data],\nbronzedataflowid= bronzeworkspaceid{[dataflowId=bronzescannerapidataflowid]}[Data],\n    scanResults1 = bronzedataflowid{[entity=\"scanResults\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(scanResults1, each [Name] = \"id\"),\n    Value = #\"Filtered Rows\"{0}[Value]\nin\n    Value;\r\nshared Result = let\n\n    Data = Json.Document(Web.Contents(\"https://api.powerbi.com/v1.0/myorg/\",\n    [\n        RelativePath= \"admin/workspaces/scanResult/\" & scanResultID,\n    \n    \n     \n\n       Headers=[Authorization=\"Bearer \" & GetToken()]\n    ]\n    ))\nin\n    Data;\r\nshared ws = let\n    Source = Result,\n    workspaces = Source[workspaces],\n    #\"Converted to Table\" = Table.FromList(workspaces, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"name\", \"type\", \"state\", \"isOnDedicatedCapacity\", \"capacityId\", \"reports\", \"dashboards\", \"datasets\", \"dataflows\", \"datamarts\", \"users\"}, {\"id\", \"name\", \"type\", \"state\", \"isOnDedicatedCapacity\", \"capacityId\", \"reports\", \"dashboards\", \"datasets\", \"dataflows\", \"datamarts\", \"users\"})\nin\n    #\"Expanded Column1\";\r\nshared bronzesharepointdataflowid = \"42a67042-44c6-4a15-8076-a5b2630adcb8\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\n","connectionOverrides":[{"path":"PowerPlatformDataflows","kind":"PowerPlatformDataflows","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"PowerPlatformDataflows\",\"path\":\"PowerPlatformDataflows\"}","audience":null},{"path":"https://login.windows.net/","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://login.windows.net/\"}","audience":null},{"path":"https://api.powerbi.com/v1.0/myorg/admin","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://api.powerbi.com/v1.0/myorg/admin\"}","audience":null},{"path":"PowerBI","kind":"PowerBI","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"PowerBI\",\"path\":\"PowerBI\"}","audience":null},{"path":"https://login.microsoftonline.com/8c39a7ff-e077-4d1c-9a1c-7431fe5eb465/oauth2/token","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://login.microsoftonline.com/8c39a7ff-e077-4d1c-9a1c-7431fe5eb465/oauth2/token\"}","audience":null}]},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"8c3a0e8d-76e6-4bc8-892c-25da90d11f42\",\"name\":\"Functions\",\"description\":\"\",\"parentId\":\"01dc618d-b9ec-48f5-8f71-ceeebb6c7907\",\"order\":2},{\"id\":\"f546cd02-0f5e-4242-ba97-2c9493150cbd\",\"name\":\"Token\",\"description\":\"\",\"parentId\":\"01dc618d-b9ec-48f5-8f71-ceeebb6c7907\",\"order\":1},{\"id\":\"f0ab86d2-004a-4093-8e71-d2a55c62eb1b\",\"name\":\"DatasetRefreshHistory\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"680f8549-02ec-4b9c-bfdc-04c3e71f5348\",\"name\":\"Parameters\",\"description\":\"\",\"parentId\":\"01dc618d-b9ec-48f5-8f71-ceeebb6c7907\",\"order\":0},{\"id\":\"bb21074c-41bc-41cf-9624-eb4eff6ee301\",\"name\":\"Activity\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"b51c1014-04c5-4851-9445-da5edfdab7fa\",\"name\":\"Scanner\",\"description\":\"\",\"parentId\":null,\"order\":0},{\"id\":\"3fa6c063-518b-4a2b-b606-7fa0d29e1f80\",\"name\":\"subroot\",\"description\":\"\",\"parentId\":\"b51c1014-04c5-4851-9445-da5edfdab7fa\",\"order\":1},{\"id\":\"01dc618d-b9ec-48f5-8f71-ceeebb6c7907\",\"name\":\"Config\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"35d7f248-fdf7-44db-bbd4-c3f4fb87fec7\",\"name\":\"scannerload\",\"description\":\"\",\"parentId\":\"b51c1014-04c5-4851-9445-da5edfdab7fa\",\"order\":2},{\"id\":\"3d901f8e-57bc-4322-9dd8-f058a2e4e73a\",\"name\":\"base\",\"description\":\"\",\"parentId\":\"b51c1014-04c5-4851-9445-da5edfdab7fa\",\"order\":0}]"}],"entities":[{"$type":"LocalEntity","name":"RefreshHistory","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"RefreshHistory.csv"},"attributes":[{"name":"id","dataType":"string"},{"name":"name","dataType":"string"},{"name":"requestId","dataType":"string"},{"name":"id.1","dataType":"int64"},{"name":"refreshType","dataType":"string"},{"name":"startTime","dataType":"dateTime"},{"name":"endTime","dataType":"dateTime"},{"name":"status","dataType":"string"},{"name":"refreshInSeconds","dataType":"double"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-11-09T22:18:44.2584055+00:00","location":"https://wabincushpcdsap1.blob.core.windows.net:443/0fa63737-3b5e-4bda-ba72-fcce04f7e9ef/RefreshHistory.csv?snapshot=2022-11-09T22%3A18%3A44.2530114Z"}]},{"$type":"LocalEntity","name":"biActAll","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"biActAll.csv"},"attributes":[{"name":"CreationTime","dataType":"dateTime"},{"name":"RecordType","dataType":"int64"},{"name":"CreationDate","dataType":"dateTime"},{"name":"Operation","dataType":"string"},{"name":"OrganizationId","dataType":"string"},{"name":"Workload","dataType":"string"},{"name":"UserId","dataType":"string"},{"name":"UserAgent","dataType":"string"},{"name":"Activity","dataType":"string"},{"name":"ItemName","dataType":"string"},{"name":"WorkSpaceName","dataType":"string"},{"name":"DashboardName","dataType":"string"},{"name":"WorkspaceId","dataType":"string"},{"name":"ObjectId","dataType":"string"},{"name":"ConsumptionMethod","dataType":"string"},{"name":"DatasetName","dataType":"string"},{"name":"ReportName","dataType":"string"},{"name":"DatasetId","dataType":"string"},{"name":"ReportType","dataType":"string"},{"name":"CreationDateOnly","dataType":"date"},{"name":"Id","dataType":"string"},{"name":"UserType","dataType":"int64"},{"name":"UserKey","dataType":"string"},{"name":"ClientIP","dataType":"string"},{"name":"ReportId","dataType":"string"},{"name":"IsSuccess","dataType":"boolean"},{"name":"RequestId","dataType":"string"},{"name":"ActivityId","dataType":"string"},{"name":"DistributionMethod","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasourceinstancebr","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasourceinstancebr.csv"},"attributes":[{"name":"datasourceType","dataType":"string"},{"name":"datasourceId","dataType":"string"},{"name":"gatewayId","dataType":"string"}]},{"$type":"LocalEntity","name":"scanworkspaces","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scanworkspaces.csv"},"attributes":[{"name":"id","dataType":"string"},{"name":"name","dataType":"string"},{"name":"type","dataType":"string"},{"name":"state","dataType":"string"},{"name":"isOnDedicatedCapacity","dataType":"boolean"},{"name":"capacityId","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasets","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasets.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"workspaceName","dataType":"string"},{"name":"datasetid","dataType":"string"},{"name":"datasetName","dataType":"string"},{"name":"configuredBy","dataType":"string"},{"name":"configuredById","dataType":"string"},{"name":"isEffectiveIdentityRequired","dataType":"boolean"},{"name":"isEffectiveIdentityRolesRequired","dataType":"boolean"},{"name":"targetStorageMode","dataType":"string"},{"name":"createdDate","dataType":"dateTime"},{"name":"contentProviderType","dataType":"string"},{"name":"description","dataType":"string"},{"name":"schemaRetrievalError","dataType":"string"},{"name":"schemaMayNotBeUpToDate","dataType":"string"},{"name":"WSIDDSID_ID","dataType":"string"}]},{"$type":"LocalEntity","name":"scancolumnmeasures","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scancolumnmeasures.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"datasetid","dataType":"string"},{"name":"tableName","dataType":"string"},{"name":"columnName","dataType":"string"},{"name":"dataType","dataType":"string"},{"name":"isHiddenColumn","dataType":"boolean"},{"name":"columnType","dataType":"string"},{"name":"measureName","dataType":"string"},{"name":"expression","dataType":"string"},{"name":"isHiddenMeasure","dataType":"boolean"},{"name":"isHiddenTable","dataType":"boolean"},{"name":"sourceExpression","dataType":"string"},{"name":"WSIDDSID_ID","dataType":"string"},{"name":"tabledataset","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasetdatasource","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasetdatasource.csv"},"attributes":[{"name":"datasetid","dataType":"string"},{"name":"datasourceInstanceId","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasetusers","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasetusers.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"datasetid","dataType":"string"},{"name":"datasetUserAccessRight","dataType":"string"},{"name":"emailAddress","dataType":"string"},{"name":"displayName","dataType":"string"},{"name":"identifier","dataType":"string"},{"name":"graphId","dataType":"string"},{"name":"principalType","dataType":"string"},{"name":"userType","dataType":"string"},{"name":"WSIDDSID_ID","dataType":"string"}]},{"$type":"LocalEntity","name":"scanreports","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scanreports.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"workspaceName","dataType":"string"},{"name":"isOnDedicatedCapacity","dataType":"boolean"},{"name":"capacityId","dataType":"string"},{"name":"reportType","dataType":"string"},{"name":"reportid","dataType":"string"},{"name":"reportName","dataType":"string"},{"name":"datasetId","dataType":"string"},{"name":"createdDateTime","dataType":"dateTime"},{"name":"modifiedDateTime","dataType":"dateTime"},{"name":"modifiedBy","dataType":"string"},{"name":"createdBy","dataType":"string"},{"name":"modifiedById","dataType":"string"},{"name":"createdById","dataType":"string"},{"name":"appId","dataType":"string"},{"name":"datasetWorkspaceId","dataType":"string"},{"name":"WSIDDSID_ID","dataType":"string"}]},{"$type":"LocalEntity","name":"scanusers","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scanusers.csv"},"attributes":[{"name":"id","dataType":"string"},{"name":"groupUserAccessRight","dataType":"string"},{"name":"emailAddress","dataType":"string"},{"name":"displayName","dataType":"string"},{"name":"identifier","dataType":"string"},{"name":"graphId","dataType":"string"},{"name":"principalType","dataType":"string"},{"name":"userType","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasourceinst","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasourceinst.csv"},"attributes":[{"name":"datasourceType","dataType":"string"},{"name":"sharePointSiteUrl","dataType":"string"},{"name":"server","dataType":"string"},{"name":"database","dataType":"string"},{"name":"datasourceId","dataType":"string"},{"name":"gatewayId","dataType":"string"}]},{"$type":"LocalEntity","name":"scantables","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scantables.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"datasetid","dataType":"string"},{"name":"tableName","dataType":"string"},{"name":"expression","dataType":"string"},{"name":"WSIDDSID_ID","dataType":"string"},{"name":"tabledataset","dataType":"string"}]},{"$type":"LocalEntity","name":"scandataflows","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandataflows.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"dataflowid","dataType":"string"},{"name":"dataflowName","dataType":"string"},{"name":"description","dataType":"string"},{"name":"configuredBy","dataType":"string"},{"name":"modifiedBy","dataType":"string"},{"name":"modifiedDateTime","dataType":"dateTime"},{"name":"users.1","dataType":"string"}]},{"$type":"LocalEntity","name":"scandataflowsources","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandataflowsources.csv"},"attributes":[{"name":"workspaceid","dataType":"string"},{"name":"dataflowid","dataType":"string"},{"name":"datasourceInstanceId","dataType":"string"}]},{"$type":"LocalEntity","name":"scandatasourcedim","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scandatasourcedim.csv"},"attributes":[{"name":"datasourceType","dataType":"string"},{"name":"sharePointSiteUrl","dataType":"string"},{"name":"server","dataType":"string"},{"name":"database","dataType":"string"},{"name":"datasourceId","dataType":"string"},{"name":"gatewayId","dataType":"string"},{"name":"server_primary","dataType":"string"}]},{"$type":"LocalEntity","name":"scantablecolumnmeasures","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"scantablecolumnmeasures.csv"},"attributes":[{"name":"tableName","dataType":"string"},{"name":"name","dataType":"string"},{"name":"expression","dataType":"string"},{"name":"isHidden","dataType":"boolean"},{"name":"tabledataset","dataType":"string"},{"name":"Type","dataType":"string"},{"name":"dataType","dataType":"string"},{"name":"columnType","dataType":"string"}]}]}