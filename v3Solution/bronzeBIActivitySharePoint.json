{"name":"bronzeBIActivitySharePoint","description":"","version":"1.0","culture":"en-US","modifiedTime":"2022-11-09T21:08:15.413059+00:00","ppdf:outputFileFormat":"Csv","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"RootPath":{"queryId":"806be8e1-9fb0-412b-b325-9e5233449e9b","queryName":"RootPath"},"Query1":{"queryId":"17a42931-342f-4687-b27a-f22e07615707","queryName":"Query1"},"biactnew":{"queryId":"c8053f45-40f4-41ac-95d1-c9ea745930ec","queryName":"biactnew","loadEnabled":true},"TransformTwoNew":{"queryId":"4c658832-c5ac-4769-be93-30aabe9e3cf9","queryName":"TransformTwoNew"},"pbiActOld":{"queryId":"063dd4a6-857a-4b33-96ae-38ab6b251293","queryName":"pbiActOld","loadEnabled":true},"TransformTwo":{"queryId":"59a6b507-2f28-4c45-a9fe-d848f1adfb7c","queryName":"TransformTwo"},"biActID":{"queryId":"f2abe054-8197-445a-a2db-79d4fbc8ac57","queryName":"biActID"}},"document":"section Section1;\r\n[Description = \"https://comptia365.sharepoint.com/sites/bicomptia/Shared%20Documents/PBI%20Admin/PBIAct\"]\r\nshared RootPath = \"https://comptia365.sharepoint.com/sites/bicomptia\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=false];\r\nshared Query1 = let\n  func = \n  // fnGetAllFilesInSharepointFolder\n    (FullPath as text) => \n    let\n      // Helper function\n      fnUriUnescapeString = \n      //Source: https://stackoverflow.com/questions/36242695/how-to-decodeuricomponent-ex-2f3f263d\n        (data as text) as text => \n        let\n          ToList = Text.ToList(data),\n          Accumulate = List.Accumulate(\n              ToList, \n              [Bytes = {}], \n              (state, current) => \n                let\n                  HexString = state[HexString]?,\n                  NextHexString = HexString & current,\n                  NextState = \n                    if HexString <> null then \n                      if Text.Length(NextHexString) = 2 then \n                        [\n                          Bytes\n                            = state[Bytes]\n                              & Binary.ToList(Binary.FromText(NextHexString, BinaryEncoding.Hex))\n                        ]\n                      else \n                        [HexString = NextHexString, Bytes = state[Bytes]]\n                    else if current = \"%\" then \n                      [HexString = \"\", Bytes = state[Bytes]]\n                    else \n                      [Bytes = state[Bytes] & {Character.ToNumber(current)}]\n                in\n                  NextState\n            ),\n          FromBinary = Text.FromBinary(Binary.FromList(Accumulate[Bytes]))\n        in\n          FromBinary,\n      StaticRoot = SharePoint.Contents(RootPath, [ApiVersion = 15]),\n      ExtractRoot = fnUriUnescapeString(Text.BeforeDelimiter(FullPath, \"/\", 4)),\n      NonRootFolders = fnUriUnescapeString(Text.AfterDelimiter(FullPath, ExtractRoot)),\n      SubfoldersList = List.Select(Text.Split(NonRootFolders, \"/\"), each _ <> null and _ <> \"\"),\n      GetRootContent = StaticRoot,\n      NavigateIn = List.Accumulate(\n          SubfoldersList, \n          GetRootContent, \n          (state, current) => state{[Name = current]}[Content]\n        ),\n      ListGenerate = List.Generate(\n          () => [\n            SelectFurtherExpansion = Table.RemoveColumns(\n                Table.SelectRows(\n                    Table.AddColumn(\n                        NavigateIn, \n                        \"ExpandFurther.1\", \n                        each Type.Is(Value.Type([Content]), type table)\n                      ), \n                    each ([ExpandFurther.1] = true)\n                  ), \n                {\"Extension\"}\n              ), \n            Result = Table.ExpandTableColumn(\n                SelectFurtherExpansion, \n                \"Content\", \n                {\"Content\", \"Name\", \"Extension\"}, \n                {\"Content\", \"Name.1\", \"Extension\"}\n              ), \n            Counter = 1, \n            NextIteration = true\n          ], \n          each [NextIteration], \n          each [\n            SelectFurtherExpansion = Table.SelectRows(\n                Table.AddColumn(\n                    [Result], \n                    \"ExpandFurther.\" & Text.From([Counter] + 1), \n                    each Type.Is(Value.Type([Content]), type table)\n                  ), \n                (x) => (Record.Field(x, \"ExpandFurther.\" & Text.From([Counter] + 1)) = true)\n              ), \n            RemoveExtension = Table.RemoveColumns(SelectFurtherExpansion, {\"Extension\"}), \n            Result = Table.ExpandTableColumn(\n                RemoveExtension, \n                \"Content\", \n                {\"Content\", \"Name\", \"Extension\"}, \n                {\"Content\", \"Name.\" & Text.From([Counter] + 1), \"Extension\"}\n              ), \n            Counter = [Counter] + 1, \n            NextIteration = try Table.RowCount([Result]) > 0 otherwise false\n          ], \n          each [Result]\n        ),\n      Combine = Table.Combine(ListGenerate),\n      FilesInRoot = Table.SelectRows(NavigateIn, each Type.Is(Value.Type([Content]), type binary)),\n      FullResults = FilesInRoot & Combine,\n      #\"Filtered Rows\" = Table.SelectRows(\n          FullResults, \n          each ([Extension] <> \"\" and [Extension] <> null)\n        ),\n      AddNameFields = Table.AddColumn(\n          #\"Filtered Rows\", \n          \"NameFields\", \n          each List.Select(\n              Record.FieldValues(\n                  Record.SelectFields(\n                      _, \n                      List.Select(Record.FieldNames(_), (x) => Text.Contains(x, \"Name\"))\n                    )\n                ), \n              (y) => y <> null\n            )\n        ),\n      AddFileName = Table.AddColumn(AddNameFields, \"FileName\", each List.Last([NameFields])),\n      AddSubFolder = Table.AddColumn(\n          AddFileName, \n          \"SubFolder\", \n          each Text.Combine(List.RemoveLastN([NameFields], 1), \"/\")\n        ),\n      #\"Removed Columns\" = Table.RemoveColumns(AddSubFolder, {\"NameFields\"})\n    in\n      #\"Removed Columns\",\n  documentation = [\n    Documentation.Name = \" Sharepoint.GetAllFilesInFolder \", \n    Documentation.Description\n      = \" Imports all files from a SharePoint folder, inclusive subfolders. \", \n    Documentation.LongDescription\n      = \" Imports all files from a SharePoint folder, inclusive subfolders. !! Root path to SP file has to be hardcoded in the function code itself !! \", \n    Documentation.Category = \" Accessing Data Functions \", \n    Documentation.Source = \"  www.TheBIccountant.com, see:  https://wp.me/p6lgsG-2kR .  \", \n    Documentation.Version = \" 1.0 \", \n    Documentation.Author = \" Imke Feldmann \", \n    Documentation.Examples = {[Description = \"  \", Code = \"  \", Result = \"  \"]}\n  ]\nin\n  Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation));\r\nshared biactnew = let\r\n  Source = Query1(\"https://comptia365.sharepoint.com/sites/bicomptia/Shared%20Documents/PBI%20Admin/PBIAdminNew/\"),\r\n  #\"Expanded Attributes\" = Table.ExpandRecordColumn(Source, \"Attributes\", {\"Size\"}, {\"Attributes.Size\"}),\r\n  #\"Filtered Rows1\" = Table.SelectRows(#\"Expanded Attributes\", each [Attributes.Size] <> \"0\"),\r\n  #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each [Attributes.Size] <> \"15\"),\r\n  #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows2\", {\"Extension\", \"Date accessed\", \"Folder Path\"}),\r\n  #\"Invoked Custom Function\" = Table.AddColumn(#\"Removed Columns\", \"TransformTwoNew\", each TransformTwoNew([Content])),\r\n  #\"Removed Other Columns\" = Table.SelectColumns(#\"Invoked Custom Function\", {\"TransformTwoNew\"}),\r\n  #\"Expanded TransformTwoNew\" = Table.ExpandTableColumn(#\"Removed Other Columns\", \"TransformTwoNew\", {\"Id\", \"RecordType\", \"CreationTime\", \"Operation\", \"OrganizationId\", \"UserType\", \"UserKey\", \"Workload\", \"UserId\", \"ClientIP\", \"UserAgent\", \"Activity\", \"ItemName\", \"WorkSpaceName\", \"CapacityId\", \"CapacityName\", \"WorkspaceId\", \"ObjectId\", \"DataflowId\", \"DataflowName\", \"DataflowAccessTokenRequestParameters\", \"IsSuccess\", \"DataflowType\", \"RequestId\", \"ActivityId\", \"DatasetName\", \"ReportName\", \"DatasetId\", \"ReportId\", \"ReportType\", \"DistributionMethod\", \"ConsumptionMethod\"}, {\"Id\", \"RecordType\", \"CreationTime\", \"Operation\", \"OrganizationId\", \"UserType\", \"UserKey\", \"Workload\", \"UserId\", \"ClientIP\", \"UserAgent\", \"Activity\", \"ItemName\", \"WorkSpaceName\", \"CapacityId\", \"CapacityName\", \"WorkspaceId\", \"ObjectId\", \"DataflowId\", \"DataflowName\", \"DataflowAccessTokenRequestParameters\", \"IsSuccess\", \"DataflowType\", \"RequestId\", \"ActivityId\", \"DatasetName\", \"ReportName\", \"DatasetId\", \"ReportId\", \"ReportType\", \"DistributionMethod\", \"ConsumptionMethod\"}),\r\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Expanded TransformTwoNew\", {{\"Id\", type text}, {\"RecordType\", type text}, {\"CreationTime\", type text}, {\"Operation\", type text}, {\"OrganizationId\", type text}, {\"UserType\", type text}, {\"UserKey\", type text}, {\"Workload\", type text}, {\"UserId\", type text}, {\"ClientIP\", type text}, {\"UserAgent\", type text}, {\"Activity\", type text}, {\"ItemName\", type text}, {\"WorkSpaceName\", type text}, {\"CapacityId\", type text}, {\"CapacityName\", type text}, {\"WorkspaceId\", type text}, {\"ObjectId\", type text}, {\"DataflowId\", type text}, {\"DataflowName\", type text}, {\"DataflowAccessTokenRequestParameters\", type text}, {\"IsSuccess\", type text}, {\"DataflowType\", type text}, {\"RequestId\", type text}, {\"ActivityId\", type text}, {\"DatasetName\", type text}, {\"ReportName\", type text}, {\"DatasetId\", type text}, {\"ReportId\", type text}, {\"ReportType\", type text}, {\"DistributionMethod\", type text}, {\"ConsumptionMethod\", type text}}),\r\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"Id\", null}, {\"RecordType\", null}, {\"CreationTime\", null}, {\"Operation\", null}, {\"OrganizationId\", null}, {\"UserType\", null}, {\"UserKey\", null}, {\"Workload\", null}, {\"UserId\", null}, {\"ClientIP\", null}, {\"UserAgent\", null}, {\"Activity\", null}, {\"ItemName\", null}, {\"WorkSpaceName\", null}, {\"CapacityId\", null}, {\"CapacityName\", null}, {\"WorkspaceId\", null}, {\"ObjectId\", null}, {\"DataflowId\", null}, {\"DataflowName\", null}, {\"DataflowAccessTokenRequestParameters\", null}, {\"IsSuccess\", null}, {\"DataflowType\", null}, {\"RequestId\", null}, {\"ActivityId\", null}, {\"DatasetName\", null}, {\"ReportName\", null}, {\"DatasetId\", null}, {\"ReportId\", null}, {\"ReportType\", null}, {\"DistributionMethod\", null}, {\"ConsumptionMethod\", null}})\r\nin\r\n  #\"Replace errors\";\r\nshared TransformTwoNew = let \nSource = (parmSample as binary) =>\nlet\n    Source = Csv.Document(parmSample,[Delimiter=\",\", Columns=28, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Removed Top Rows\" = Table.Skip(Source,1),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Top Rows\", [PromoteAllScalars=true])\nin\n    #\"Promoted Headers\"\n    in\n    Source;\r\nshared pbiActOld = let\r\n  Source = Query1(\"https://comptia365.sharepoint.com/sites/bicomptia/Shared%20Documents/PBI%20Admin/PBIAct\"),\r\n  #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \"PBIAct\")),\r\n  #\"Expanded Attributes\" = Table.ExpandRecordColumn(#\"Filtered Rows\", \"Attributes\", {\"Size\"}, {\"Attributes.Size\"}),\r\n  #\"Filtered Rows1\" = Table.SelectRows(#\"Expanded Attributes\", each [Attributes.Size] <> \"0\"),\r\n  #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each [Attributes.Size] <> \"15\"),\r\n  #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows2\", {\"Extension\", \"Date accessed\", \"Folder Path\"}),\r\n  #\"Invoked Custom Function\" = Table.AddColumn(#\"Removed Columns\", \"TransformTwo\", each TransformTwo([Content])),\r\n  #\"Removed Columns1\" = Table.RemoveColumns(#\"Invoked Custom Function\", {\"Content\", \"Date modified\", \"Date created\", \"Attributes.Size\"}),\r\n  #\"Expanded TransformTwo\" = Table.ExpandTableColumn(#\"Removed Columns1\", \"TransformTwo\", {\"Id\", \"RecordType\", \"CreationTime\", \"Operation\", \"OrganizationId\", \"UserType\", \"UserKey\", \"Workload\", \"UserId\", \"ClientIP\", \"UserAgent\", \"Activity\", \"ItemName\", \"WorkSpaceName\", \"DashboardName\", \"WorkspaceId\", \"ObjectId\", \"DashboardId\", \"Datasets\", \"IsSuccess\", \"RequestId\", \"ActivityId\", \"ConsumptionMethod\", \"DatasetName\", \"ReportName\", \"DatasetId\", \"ReportId\", \"ReportType\"}, {\"Id\", \"RecordType\", \"CreationTime\", \"Operation\", \"OrganizationId\", \"UserType\", \"UserKey\", \"Workload\", \"UserId\", \"ClientIP\", \"UserAgent\", \"Activity\", \"ItemName\", \"WorkSpaceName\", \"DashboardName\", \"WorkspaceId\", \"ObjectId\", \"DashboardId\", \"Datasets\", \"IsSuccess\", \"RequestId\", \"ActivityId\", \"ConsumptionMethod\", \"DatasetName\", \"ReportName\", \"DatasetId\", \"ReportId\", \"ReportType\"}),\r\n  #\"Removed Columns2\" = Table.RemoveColumns(#\"Expanded TransformTwo\", {\"Name\", \"Name.1\", \"ExpandFurther.1\", \"FileName\", \"SubFolder\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed Columns2\", {{\"Id\", type text}, {\"RecordType\", Int64.Type}, {\"CreationTime\", type datetime}, {\"Operation\", type text}, {\"OrganizationId\", type text}, {\"UserType\", Int64.Type}, {\"UserKey\", type text}, {\"Workload\", type text}, {\"UserId\", type text}, {\"ClientIP\", type text}, {\"UserAgent\", type text}, {\"Activity\", type text}, {\"ItemName\", type text}, {\"WorkSpaceName\", type text}, {\"DashboardName\", type any}, {\"WorkspaceId\", type text}, {\"ObjectId\", type text}, {\"DashboardId\", type any}, {\"Datasets\", type any}, {\"IsSuccess\", type logical}, {\"RequestId\", type text}, {\"ActivityId\", type text}, {\"ConsumptionMethod\", type any}, {\"DatasetName\", type any}, {\"ReportName\", type any}, {\"DatasetId\", type any}, {\"ReportId\", type any}, {\"ReportType\", type any}}),\r\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed column type\", {{\"DashboardName\", type text}, {\"DashboardId\", type text}, {\"Datasets\", type text}, {\"ConsumptionMethod\", type text}, {\"DatasetName\", type text}, {\"ReportName\", type text}, {\"DatasetId\", type text}, {\"ReportId\", type text}, {\"ReportType\", type text}}),\r\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"DashboardName\", null}, {\"DashboardId\", null}, {\"Datasets\", null}, {\"ConsumptionMethod\", null}, {\"DatasetName\", null}, {\"ReportName\", null}, {\"DatasetId\", null}, {\"ReportId\", null}, {\"ReportType\", null}})\r\nin\r\n  #\"Replace errors\";\r\nshared TransformTwo = let \nSource = (parmSample as binary) =>\nlet\n    Source = Csv.Document(parmSample,[Delimiter=\",\", Columns=26, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])\n   \nin\n   #\"Promoted Headers\"\nin\nSource;\r\nshared biActID = let\n    Source = Table.Combine({biactnew, pbiActOld}),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"CreationTime\", type datetimezone}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"CreationTime\", type datetime}}),\n    #\"Removed Columns2\" = Table.RemoveColumns(#\"Changed Type1\",{\"UserType\", \"UserKey\", \"ClientIP\", \"DashboardId\", \"Datasets\", \"IsSuccess\", \"RequestId\", \"ActivityId\", \"ReportId\"}),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Removed Columns2\",{{\"Id\", type text}, {\"RecordType\", Int64.Type}, {\"CreationTime\", type datetime}, {\"Operation\", type text}, {\"OrganizationId\", type text}, {\"Workload\", type text}, {\"UserId\", type text}, {\"UserAgent\", type text}, {\"Activity\", type text}, {\"ItemName\", type text}, {\"WorkSpaceName\", type text}, {\"DashboardName\", type text}, {\"ObjectId\", type text}, {\"ConsumptionMethod\", type text}, {\"DatasetName\", type any}, {\"ReportName\", type any}, {\"ReportType\", type any}}),\n    #\"Inserted Date\" = Table.AddColumn(#\"Changed Type2\", \"Date\", each DateTime.Date([CreationTime]), type date),\n    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Inserted Date\",{{\"ReportType\", type text}, {\"ReportName\", type text}, {\"DatasetName\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type3\",\"?\",\"-\",Replacer.ReplaceText,{\"ItemName\", \"WorkSpaceName\"}),\n    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"DatasetId\", type text}, {\"WorkspaceId\", type text}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Changed Type4\",{\"Id\"}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Removed Duplicates\", \"Index\", 1, 1, Int64.Type),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Index\",{{\"Index\", \"newID\"}})\nin\n    #\"Renamed Columns\";\r\n","connectionOverrides":[{"path":"https://api.powerbi.com/v1.0/myorg","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://api.powerbi.com/v1.0/myorg\"}","audience":null},{"path":"https://login.microsoftonline.com/4510a959-aa93-4f35-a3f5-e2249f4d35f6/oauth2/token","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://login.microsoftonline.com/4510a959-aa93-4f35-a3f5-e2249f4d35f6/oauth2/token\"}","audience":null},{"path":"https://comptia365.sharepoint.com/sites/bicomptia","kind":"SharePoint","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"SharePoint\",\"path\":\"https://comptia365.sharepoint.com/sites/bicomptia\"}","audience":null}]},"annotations":[{"name":"pbi:QueryGroups","value":"[]"}],"entities":[{"$type":"LocalEntity","name":"biactnew","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"biactnew.csv"},"attributes":[{"name":"Id","dataType":"string"},{"name":"RecordType","dataType":"string"},{"name":"CreationTime","dataType":"string"},{"name":"Operation","dataType":"string"},{"name":"OrganizationId","dataType":"string"},{"name":"UserType","dataType":"string"},{"name":"UserKey","dataType":"string"},{"name":"Workload","dataType":"string"},{"name":"UserId","dataType":"string"},{"name":"ClientIP","dataType":"string"},{"name":"UserAgent","dataType":"string"},{"name":"Activity","dataType":"string"},{"name":"ItemName","dataType":"string"},{"name":"WorkSpaceName","dataType":"string"},{"name":"CapacityId","dataType":"string"},{"name":"CapacityName","dataType":"string"},{"name":"WorkspaceId","dataType":"string"},{"name":"ObjectId","dataType":"string"},{"name":"DataflowId","dataType":"string"},{"name":"DataflowName","dataType":"string"},{"name":"DataflowAccessTokenRequestParameters","dataType":"string"},{"name":"IsSuccess","dataType":"string"},{"name":"DataflowType","dataType":"string"},{"name":"RequestId","dataType":"string"},{"name":"ActivityId","dataType":"string"},{"name":"DatasetName","dataType":"string"},{"name":"ReportName","dataType":"string"},{"name":"DatasetId","dataType":"string"},{"name":"ReportId","dataType":"string"},{"name":"ReportType","dataType":"string"},{"name":"DistributionMethod","dataType":"string"},{"name":"ConsumptionMethod","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-11-09T21:03:07.1752334+00:00","location":"https://wabincushpcdsap1.blob.core.windows.net:443/bf1662c6-bca3-4718-9afb-560e682e4343/biactnew.csv?snapshot=2022-11-09T21%3A03%3A07.1707170Z"}]},{"$type":"LocalEntity","name":"pbiActOld","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"pbiActOld.csv"},"attributes":[{"name":"Id","dataType":"string"},{"name":"RecordType","dataType":"int64"},{"name":"CreationTime","dataType":"dateTime"},{"name":"Operation","dataType":"string"},{"name":"OrganizationId","dataType":"string"},{"name":"UserType","dataType":"int64"},{"name":"UserKey","dataType":"string"},{"name":"Workload","dataType":"string"},{"name":"UserId","dataType":"string"},{"name":"ClientIP","dataType":"string"},{"name":"UserAgent","dataType":"string"},{"name":"Activity","dataType":"string"},{"name":"ItemName","dataType":"string"},{"name":"WorkSpaceName","dataType":"string"},{"name":"DashboardName","dataType":"string"},{"name":"WorkspaceId","dataType":"string"},{"name":"ObjectId","dataType":"string"},{"name":"DashboardId","dataType":"string"},{"name":"Datasets","dataType":"string"},{"name":"IsSuccess","dataType":"boolean"},{"name":"RequestId","dataType":"string"},{"name":"ActivityId","dataType":"string"},{"name":"ConsumptionMethod","dataType":"string"},{"name":"DatasetName","dataType":"string"},{"name":"ReportName","dataType":"string"},{"name":"DatasetId","dataType":"string"},{"name":"ReportId","dataType":"string"},{"name":"ReportType","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-11-09T21:07:15.5833993+00:00","location":"https://wabincushpcdsap1.blob.core.windows.net:443/bf1662c6-bca3-4718-9afb-560e682e4343/pbiActOld.csv?snapshot=2022-11-09T21%3A07%3A15.6072604Z"}]}]}